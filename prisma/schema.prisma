generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?     // Make password optional for social login
  role          Role        @default(USER)
  profile       Profile?
  mixes         Mix[]
  comments      Comment[]
  memberships   Membership[]
  accounts      Account[]   // Add this line
  sessions      Session[]   // Add this line
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Profile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  username      String    @unique
  bio          String?
  genre        String[]
  location     String?
  avatar       String?
  coverImage   String?
  socialLinks  Json?     // Store social media links
  equipment    String?   // DJ equipment/setup
  experience   String?
  followers    String[]  @db.ObjectId  // Array of follower user IDs
  following    String[]  @db.ObjectId  // Array of following user IDs
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Mix {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  audioUrl      String    // URL to stored audio file
  coverImage    String?   // URL to mix cover image
  genre         String[]
  duration      Int       // Duration in seconds
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         String[]  @db.ObjectId  // Array of user IDs who liked
  comments      Comment[]
  plays         Int       @default(0)
  isPublic      Boolean   @default(true)
  tags          String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  mixId     String   @db.ObjectId
  mix       Mix      @relation(fields: [mixId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  userId        String           @db.ObjectId
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          MembershipPlan
  stripeId      String?         // Stripe subscription ID
  status        MembershipStatus @default(ACTIVE)
  startDate     DateTime        @default(now())
  endDate       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  DJ
  USER
}

enum MembershipPlan {
  FREE
  PRO
  PREMIUM
}

enum MembershipStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}