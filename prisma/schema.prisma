// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  mixes         Mix[]
  likes         Like[]
  comments      Comment[]
  playHistory   PlayHistory[]
  profile       Profile?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Profile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  username      String?   @unique
  avatar        String?
  bio           String?
  location      String?
  website       String?
  soundcloud    String?
  twitter       String?
  instagram     String?
  experience    String?
  followers     String[]   @db.ObjectId
  following     String[]   @db.ObjectId
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId])
}

model Mix {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  audioUrl    String
  coverImage  String?
  genre       String[]
  duration    Int          // Duration in seconds
  plays       Int          @default(0)
  isPublic    Boolean      @default(true)
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
  playHistory PlayHistory[]

  @@index([userId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mixId     String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  mix       Mix      @relation(fields: [mixId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mixId, userId])
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  mixId     String    @db.ObjectId
  userId    String    @db.ObjectId
  parentId  String?   @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mix       Mix       @relation(fields: [mixId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToComment")
  likes     String[]  @db.ObjectId

  @@index([mixId])
  @@index([userId])
  @@index([parentId])
}

model PlayHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  mixId      String   @db.ObjectId
  userId     String?  @db.ObjectId
  identifier String
  createdAt  DateTime @default(now())
  mix        Mix      @relation(fields: [mixId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([mixId])
  @@index([userId])
  @@index([identifier])
  @@index([createdAt])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  DJ
  USER
}

enum MembershipPlan {
  FREE
  PRO
  PREMIUM
}

enum MembershipStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}